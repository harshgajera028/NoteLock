{"ast":null,"code":"var _jsxFileName = \"D:\\\\MernStack\\\\NoteVerse_App\\\\frontend\\\\src\\\\Components\\\\CreateNote\\\\Note.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport \"./Note.css\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport Navbar from \"../Navbar/Navbar\";\nimport Alert from \"@mui/material/Alert\";\nimport { Snackbar } from \"@mui/material\";\nimport { toast } from \"react-toastify\";\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport Addnote from \"../AddNote/Addnote\";\nimport { useNavigate } from \"react-router-dom\";\nimport jwtDecode from \"jwt-decode\"; // npm install jwt-decode\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Note = () => {\n  _s();\n  const navigate = useNavigate();\n  const [alertMessage, setAlertMessage] = useState(null); // State for the alert message\n  const [openSnackbar, setOpenSnackbar] = useState(false);\n  const [addlist, setAddlist] = useState([]);\n  const [user, setUser] = useState({\n    title: \"\",\n    description: \"\"\n  });\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setUser({\n      ...user,\n      [name]: value\n    });\n  };\n\n  // Since you are dealing with asynchronous operations (such as making an HTTP request using Axios),\n  // using async/await can simplify the code and make it more intuitive and handle potential errors more gracefully and make the code easier to read\n\n  // getNotes function ---> FETCH ALL user NOTES till now\n  const getNotes = async () => {\n    try {\n      const token = localStorage.getItem(\"token\");\n      if (token) {\n        const response = await axios.get(\"http://localhost:4000/api/v1/getNotes\", {\n          headers: {\n            \"x-access-token\": token\n          }\n        });\n        if (response.data.message === \"Token Valid\") {\n          setAddlist(response.data.UserData); // FETCH ALL NOTES of USER from BACKEND/SERVER\n          // alert('GET NOTES');\n        }\n      }\n    } catch (error) {\n      console.error(\"Error in Getting notes:\", error);\n      toast.error(\"Error: \" + error.response.data.message, {\n        theme: \"dark\"\n      }); // Error in getting note\n    }\n  };\n\n  // useEffect runs when we navigate means when we Login and redirect to ADD NOTES page\n  // navigate function changes (which happens whenever the component re-renders), the effect will be re-run.\n\n  useEffect(() => {\n    const token = localStorage.getItem(\"token\"); // Retrieves the token from the local storage\n\n    if (!token) {\n      //  if token is not present,that means user is not authenticated.\n      navigate(\"/login\");\n    } // If the token is present means --> user authenticated\n    else {\n      // Decodes the token to extract information about the user --> email, id and iat\n      const user = jwtDecode(token);\n      if (!user) {\n        // Checks if the user object could not be decoded which means the token is invalid or corrupted.\n        localStorage.removeItem(\"token\"); // Remove the invalid token\n        navigate(\"/login\"); // Redirect to login page due to an invalid token\n      } else {\n        // If both the token is present and the user object is decoded successfully, it means the user is authenticated and the token is valid --> then getNotes function executed\n        getNotes(); // Call the async function to fetch ALL user NOTES\n      }\n    }\n  }, [navigate]); // The dependency array ensures that this useEffect runs whenever the navigate func changes\n\n  // function to ADD Notes\n  const addNotes = async () => {\n    const {\n      title,\n      description\n    } = user;\n    const token = localStorage.getItem(\"token\");\n    if (!token) {\n      // If token is missing, show the alert message\n      toast.error(\"Please Login to Add Notes\", {\n        theme: \"colored\"\n      });\n      // setTimeout is added becuase it redirects to login page without showing message but now it first display msg and then redirect to login page\n      setTimeout(() => {\n        navigate(\"/login\"); // Redirect to the login page\n      }, 2000); // Adjust the delay as needed --> 2 sec\n\n      return; // return back to prevent further execution\n    }\n\n    if (!title || !description) {\n      if (!title && description) {\n        setAlertMessage(\"Title is required\");\n      } else if (title && !description) {\n        setAlertMessage(\"Description is required\");\n      } else {\n        setAlertMessage(\"Both title and description are required\");\n      }\n      // Open the snackbar\n      setOpenSnackbar(true);\n\n      // Set a timeout to close the snackbar after 3 seconds\n      setTimeout(() => {\n        setOpenSnackbar(false);\n        setAlertMessage(null);\n      }, 3000);\n      return; // return back\n    }\n\n    if (title.length < 3 || title.length > 25) {\n      toast.error(\"Title must be between 3 and 25 characters\", {\n        theme: \"dark\"\n      });\n      return;\n    }\n    if (description.length <= 5) {\n      toast.error(\"Description must be greater than 5 character\", {\n        theme: \"dark\"\n      });\n      return;\n    }\n\n    // if above conditions satisfies\n\n    try {\n      // axios used to make HTTP POST request to a local server endpoint addNotes here\n      const response = await axios.post(\"http://localhost:4000/api/v1/addNotes\", user, {\n        headers: {\n          \"x-access-token\": token\n        }\n      });\n\n      // Note added successfully\n      if (response.data.message === \"Notes Added Successfully\") {\n        // alert(response.data.message)\n        toast.success(response.data.message, {\n          theme: \"dark\"\n        });\n        getNotes(); // FETCH ALL NOTES AGAIN AFTER ADDING NEW NOTE\n        setUser({\n          title: \"\",\n          description: \"\"\n        }); // Clear input fields\n      }\n    } catch (error) {\n      toast.error(\"Error: \" + error.response.data.message, {\n        theme: \"colored\"\n      }); // Error in Adding note\n    }\n  };\n\n  const LogOut = () => {\n    const token = localStorage.getItem(\"token\");\n\n    // if token does not exist and still user click on logout button then alert message will be displayed on UI and return\n    if (!token) {\n      toast.error(\"Please Login First\", {\n        theme: \"colored\"\n      });\n      setTimeout(() => {\n        navigate(\"/login\"); // Redirect to the login page\n      }, 2000);\n      return;\n    }\n\n    // else --> if token exist and user wants to logout\n\n    localStorage.removeItem(\"token\"); // Remove the token from localStorage\n    toast.success(\"Logged out successfully\", {\n      theme: \"colored\"\n    });\n    setTimeout(() => {\n      navigate(\"/login\"); // Redirect to the login page\n    }, 2000);\n    return;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {\n      autoClose: 2000,\n      style: {\n        marginTop: \"120px\",\n        marginRight: \"-10px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: openSnackbar,\n      autoHideDuration: 2000 // Auto-hide after 2 seconds\n      ,\n      onClose: () => setOpenSnackbar(false),\n      anchorOrigin: {\n        vertical: \"top\",\n        horizontal: \"right\"\n      },\n      style: {\n        marginTop: \"110px\",\n        marginRight: \"-20px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        variant: \"filled\",\n        severity: \"error\",\n        children: alertMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"note-page\",\n      children: [console.log(\"ALL NOTES in addlist\", addlist), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"note-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"note-input\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"note-inputval\",\n            type: \"text\",\n            name: \"title\",\n            value: user.title,\n            placeholder: \"Title\",\n            onChange: handleChange,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            className: \"note-inputval\",\n            type: \"text\",\n            name: \"description\",\n            value: user.description,\n            onChange: handleChange,\n            rows: 5,\n            placeholder: \"ADD description...\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"note-btnflex\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: addNotes,\n            className: \"note-btn\",\n            children: \"Add Notes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: LogOut,\n            className: \"note-btn logout-button\",\n            children: \"Log Out\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Addnote, {\n      addlist: addlist,\n      setAddlist: setAddlist\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 193,\n    columnNumber: 5\n  }, this);\n};\n_s(Note, \"jzL8J388RVzkf7shGYbD5QmcppQ=\", false, function () {\n  return [useNavigate];\n});\n_c = Note;\nexport default Note;\nvar _c;\n$RefreshReg$(_c, \"Note\");","map":{"version":3,"names":["React","useEffect","useState","axios","Navbar","Alert","Snackbar","toast","ToastContainer","Addnote","useNavigate","jwtDecode","jsxDEV","_jsxDEV","Note","_s","navigate","alertMessage","setAlertMessage","openSnackbar","setOpenSnackbar","addlist","setAddlist","user","setUser","title","description","handleChange","e","name","value","target","getNotes","token","localStorage","getItem","response","get","headers","data","message","UserData","error","console","theme","removeItem","addNotes","setTimeout","length","post","success","LogOut","children","fileName","_jsxFileName","lineNumber","columnNumber","autoClose","style","marginTop","marginRight","open","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","variant","severity","className","log","type","placeholder","onChange","required","rows","onClick","_c","$RefreshReg$"],"sources":["D:/MernStack/NoteVerse_App/frontend/src/Components/CreateNote/Note.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport \"./Note.css\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport Navbar from \"../Navbar/Navbar\";\r\nimport Alert from \"@mui/material/Alert\";\r\nimport { Snackbar } from \"@mui/material\";\r\nimport { toast } from \"react-toastify\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport Addnote from \"../AddNote/Addnote\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport jwtDecode from \"jwt-decode\"; // npm install jwt-decode\r\n\r\nconst Note = () => {\r\n  const navigate = useNavigate();\r\n\r\n  const [alertMessage, setAlertMessage] = useState(null); // State for the alert message\r\n  const [openSnackbar, setOpenSnackbar] = useState(false);\r\n\r\n  const [addlist, setAddlist] = useState([]);\r\n\r\n  const [user, setUser] = useState({\r\n    title: \"\",\r\n    description: \"\",\r\n  });\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setUser({ ...user, [name]: value });\r\n  };\r\n\r\n  // Since you are dealing with asynchronous operations (such as making an HTTP request using Axios),\r\n  // using async/await can simplify the code and make it more intuitive and handle potential errors more gracefully and make the code easier to read\r\n\r\n  // getNotes function ---> FETCH ALL user NOTES till now\r\n  const getNotes = async () => {\r\n    try {\r\n      const token = localStorage.getItem(\"token\");\r\n\r\n      if (token) {\r\n        const response = await axios.get(\r\n          \"http://localhost:4000/api/v1/getNotes\",\r\n          {\r\n            headers: {\r\n              \"x-access-token\": token,\r\n            },\r\n          }\r\n        );\r\n\r\n        if (response.data.message === \"Token Valid\") {\r\n          setAddlist(response.data.UserData); // FETCH ALL NOTES of USER from BACKEND/SERVER\r\n          // alert('GET NOTES');\r\n        } \r\n      }\r\n    } \r\n    catch (error) {\r\n      console.error(\"Error in Getting notes:\", error);\r\n      toast.error(\"Error: \" + error.response.data.message, {\r\n        theme: \"dark\",\r\n      }); // Error in getting note\r\n    }\r\n  };\r\n\r\n  // useEffect runs when we navigate means when we Login and redirect to ADD NOTES page\r\n  // navigate function changes (which happens whenever the component re-renders), the effect will be re-run.\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem(\"token\"); // Retrieves the token from the local storage\r\n\r\n    if (!token) {\r\n      //  if token is not present,that means user is not authenticated.\r\n      navigate(\"/login\");\r\n    } // If the token is present means --> user authenticated\r\n    else {\r\n      // Decodes the token to extract information about the user --> email, id and iat\r\n      const user = jwtDecode(token);\r\n\r\n      if (!user) {\r\n        // Checks if the user object could not be decoded which means the token is invalid or corrupted.\r\n        localStorage.removeItem(\"token\"); // Remove the invalid token\r\n        navigate(\"/login\"); // Redirect to login page due to an invalid token\r\n      } else {\r\n        // If both the token is present and the user object is decoded successfully, it means the user is authenticated and the token is valid --> then getNotes function executed\r\n        getNotes(); // Call the async function to fetch ALL user NOTES\r\n      }\r\n    }\r\n  }, [navigate]); // The dependency array ensures that this useEffect runs whenever the navigate func changes\r\n\r\n  // function to ADD Notes\r\n  const addNotes = async () => {\r\n    const { title, description } = user;\r\n\r\n    const token = localStorage.getItem(\"token\");\r\n\r\n    if (!token) {\r\n      // If token is missing, show the alert message\r\n      toast.error(\"Please Login to Add Notes\", { theme: \"colored\" });\r\n      // setTimeout is added becuase it redirects to login page without showing message but now it first display msg and then redirect to login page\r\n      setTimeout(() => {\r\n        navigate(\"/login\"); // Redirect to the login page\r\n      }, 2000); // Adjust the delay as needed --> 2 sec\r\n\r\n      return; // return back to prevent further execution\r\n    }\r\n\r\n    if (!title || !description) {\r\n      if (!title && description) {\r\n        setAlertMessage(\"Title is required\");\r\n      } else if (title && !description) {\r\n        setAlertMessage(\"Description is required\");\r\n      } else {\r\n        setAlertMessage(\"Both title and description are required\");\r\n      }\r\n      // Open the snackbar\r\n      setOpenSnackbar(true);\r\n\r\n      // Set a timeout to close the snackbar after 3 seconds\r\n      setTimeout(() => {\r\n        setOpenSnackbar(false);\r\n        setAlertMessage(null);\r\n      }, 3000);\r\n\r\n      return; // return back\r\n    }\r\n\r\n    if (title.length < 3 || title.length > 25) {\r\n      toast.error(\"Title must be between 3 and 25 characters\", {\r\n        theme: \"dark\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (description.length <= 5) {\r\n      toast.error(\"Description must be greater than 5 character\", {\r\n        theme: \"dark\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    // if above conditions satisfies\r\n\r\n    try {\r\n      // axios used to make HTTP POST request to a local server endpoint addNotes here\r\n      const response = await axios.post(\r\n        \"http://localhost:4000/api/v1/addNotes\",\r\n        user,\r\n        {\r\n          headers: {\r\n            \"x-access-token\": token,\r\n          },\r\n        }\r\n      );\r\n\r\n      // Note added successfully\r\n      if (response.data.message === \"Notes Added Successfully\") {\r\n        // alert(response.data.message)\r\n        toast.success(response.data.message, { theme: \"dark\" });\r\n        getNotes(); // FETCH ALL NOTES AGAIN AFTER ADDING NEW NOTE\r\n        setUser({ title: \"\", description: \"\" }); // Clear input fields\r\n      } \r\n    }\r\n    catch (error) {\r\n      toast.error(\"Error: \" + error.response.data.message, {\r\n        theme: \"colored\",\r\n      }); // Error in Adding note\r\n    }\r\n  };\r\n\r\n  const LogOut = () => {\r\n    const token = localStorage.getItem(\"token\");\r\n\r\n    // if token does not exist and still user click on logout button then alert message will be displayed on UI and return\r\n    if (!token) {\r\n      toast.error(\"Please Login First\", { theme: \"colored\" });\r\n      setTimeout(() => {\r\n        navigate(\"/login\"); // Redirect to the login page\r\n      }, 2000);\r\n      return;\r\n    }\r\n\r\n    // else --> if token exist and user wants to logout\r\n\r\n    localStorage.removeItem(\"token\"); // Remove the token from localStorage\r\n    toast.success(\"Logged out successfully\", { theme: \"colored\" });\r\n    setTimeout(() => {\r\n      navigate(\"/login\"); // Redirect to the login page\r\n    }, 2000);\r\n    return;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Navbar />\r\n\r\n      <ToastContainer\r\n        autoClose={2000}\r\n        style={{ marginTop: \"120px\", marginRight: \"-10px\" }}\r\n      />\r\n\r\n      <Snackbar\r\n        open={openSnackbar}\r\n        autoHideDuration={2000} // Auto-hide after 2 seconds\r\n        onClose={() => setOpenSnackbar(false)}\r\n        anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\r\n        style={{ marginTop: \"110px\", marginRight: \"-20px\" }}\r\n      >\r\n        <Alert variant=\"filled\" severity=\"error\">\r\n          {alertMessage}\r\n        </Alert>\r\n      </Snackbar>\r\n\r\n      <div className=\"note-page\">\r\n        {/* to see ALL Notes in browser console */}\r\n        {console.log(\"ALL NOTES in addlist\", addlist)}\r\n        {/* browser console --> {ALL NOTES : Array(18)} ex -> 2: {_id: '64cf531deafbb3c8c706135b', title: 'title 2', description: 'hello Afshan*/}\r\n\r\n        <div className=\"note-container\">\r\n          <div className=\"note-input\">\r\n            <input\r\n              className=\"note-inputval\"\r\n              type=\"text\"\r\n              name=\"title\"\r\n              value={user.title}\r\n              placeholder=\"Title\"\r\n              onChange={handleChange}\r\n              required\r\n            />\r\n            <textarea\r\n              className=\"note-inputval\"\r\n              type=\"text\"\r\n              name=\"description\"\r\n              value={user.description}\r\n              onChange={handleChange}\r\n              rows={5}\r\n              placeholder=\"ADD description...\"\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"note-btnflex\">\r\n            <button onClick={addNotes} className=\"note-btn\">\r\n              Add Notes\r\n            </button>\r\n            {/* this logout button does not exist inside this div*/}\r\n            <button onClick={LogOut} className=\"note-btn logout-button\">\r\n              Log Out\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <Addnote addlist={addlist} setAddlist={setAddlist} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Note;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}